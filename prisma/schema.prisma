generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  firstName          String
  lastName           String
  email              String               @unique
  password           String
  role               Role                 @default(USER)
  phoneNumber        String
  profilePic         String?
  oAuthId            String?
  provider           String?
  isDeleted          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Address            Address?
  VendorOwner        VendorOwner?
  VendorOrganization VendorOrganization[]
  Pharmacist         Pharmacist?
  PharmacyOutlet     PharmacyOutlet[]
  Orders             Orders[]
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model VendorOwner {
  vendorId            BigInt               @id @default(autoincrement())
  userId              String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  user                User                 @relation(fields: [userId], references: [id])
  VendorOrganizations VendorOrganization[]
}

model VendorOrganization {
  orgId         BigInt      @id @default(autoincrement())
  vendorOwnerId BigInt
  businessName  String
  gstin         String      @unique
  email         String      @unique
  street        String
  city          String
  state         String
  pincode       Int
  isActive      Boolean     @default(true)
  phoneNumber   String
  website       String?
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  VendorOwner   VendorOwner @relation(fields: [vendorOwnerId], references: [vendorId])
  Orders        Orders[]
}

model Pharmacist {
  pharmacistId    BigInt           @id @default(autoincrement())
  userId          String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  pharmacyOutlets PharmacyOutlet[]
}

model PharmacyOutlet {
  pharmacyOutletId  BigInt     @id @default(autoincrement())
  pharmacistOwnerId BigInt
  businessName      String
  street            String
  city              String
  state             String
  pincode           Int
  phoneNumber       String
  gstin             String     @unique
  email             String     @unique
  website           String?
  userId            String
  isActive          Boolean    @default(true)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              User       @relation(fields: [userId], references: [id])
  pharmacist        Pharmacist @relation(fields: [pharmacistOwnerId], references: [pharmacistId])
  Orders            Orders[]
}

model Orders {
  orderId          String             @id
  userId           String
  pharmacyOutletId BigInt
  orgId            BigInt
  orderDate        DateTime
  orderStatus      orderStatus        @default(PENDING)
  paymentStatus    paymentStatus      @default(PENDING)
  paymentMethod    paymentMethod
  amount           Float
  currency         String
  createdAt        DateTime           @default(now())
  isDeleted        Boolean            @default(false)
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
  orderedBy        PharmacyOutlet     @relation(fields: [pharmacyOutletId], references: [pharmacyOutletId])
  orderedTo        VendorOrganization @relation(fields: [orgId], references: [orgId])
  OrderItems       OrderItems[]
}

model OrderItems {
  orderItemId BigInt   @id @default(autoincrement())
  orderId     String
  productId   BigInt
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Orders   @relation(fields: [orderId], references: [orderId])
}

enum Role {
  USER
  ADMIN
  SUPPLIER
  PHARMACY
}

enum orderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum paymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum paymentMethod {
  CASH_ON_DELIVERY
  UPI
  CARD
  NET_BANKING
  CRYPTO
}
